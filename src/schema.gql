# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DishChoice {
  name: String!
  extra: Float
}

type DishOption {
  name: String!
  choices: [DishChoice!]
  extra: Float
}

type Dish {
  id: Float!
  createdAt: DateTime!
  updateAt: DateTime!
  name: String!
  price: Float!
  photo: String!
  description: String!
  restaurant: Restaurant
  options: [DishOption!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Category {
  id: Float!
  createdAt: DateTime!
  updateAt: DateTime!
  name: String!
  coverImage: String!
  slug: String!
  restaurants: [Restaurant!]!
  restaurantCount: Float!
}

type Restaurant {
  id: Float!
  createdAt: DateTime!
  updateAt: DateTime!
  name: String!
  address: String!
  coverImage: String!
  owner: User!
  category: Category
  menu: [Dish!]!
}

type User {
  id: Float!
  createdAt: DateTime!
  updateAt: DateTime!
  firstName: String!
  lastName: String!
  username: String!
  phoneNumber: Float
  address: String
  birthdate: DateTime
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [Restaurant!]!
}

enum UserRole {
  client
  owner
  delivery
}

type CreateUserAccountOutput {
  message: String
  ok: Boolean!
}

type LoginUserOutput {
  message: String
  ok: Boolean!
  token: String
}

type VerifyEmailOutput {
  message: String
  ok: Boolean!
}

type UserProfileOutput {
  message: String
  ok: Boolean!
  user: User
}

type EditUserProfileOutput {
  message: String
  ok: Boolean!
}

type DeleteUserAccountOutput {
  message: String
  ok: Boolean!
  user: User!
}

type ForgotUserPasswordOutput {
  message: String
  ok: Boolean!
}

type ResetPasswordUserOutput {
  message: String
  ok: Boolean!
}

type Admin {
  id: Float!
  createdAt: DateTime!
  updateAt: DateTime!
  firstName: String
  lastName: String
  email: String!
  password: String!
  role: String!
}

type CreateAdminAccountOutput {
  message: String
  ok: Boolean!
}

type LoginAdminOutput {
  message: String
  ok: Boolean!
  token: String
}

type CreateRestaurantOutput {
  message: String
  ok: Boolean!
}

type DeleteRestaurantOutput {
  message: String
  ok: Boolean!
}

type EditRestaurantOutput {
  message: String
  ok: Boolean!
}

type RestaurantOutput {
  message: String
  ok: Boolean!
  restaurant: Restaurant
}

type RestaurantsOutput {
  message: String
  ok: Boolean!
  totalPages: Float
  totalResults: Float
  results: [Restaurant!]
}

type SearchRestaurantOutput {
  message: String
  ok: Boolean!
  totalPages: Float
  totalResults: Float
  restaurants: [Restaurant!]
}

type AllCategoriesOutput {
  message: String
  ok: Boolean!
  categories: [Category!]
}

type CategoryOutput {
  message: String
  ok: Boolean!
  totalPages: Float
  totalResults: Float
  category: Category
  restaurants: [Restaurant!]
}

type CreateCategoryOutput {
  message: String
  ok: Boolean!
}

type DeleteCategoryOutput {
  message: String
  ok: Boolean!
}

type EditCategoryOutput {
  message: String
  ok: Boolean!
}

type CreateDishOutput {
  message: String
  ok: Boolean!
}

type DeleteDishOutput {
  message: String
  ok: Boolean!
}

type EditDishOutput {
  message: String
  ok: Boolean!
}

type Query {
  me: User!
  userProfile(userId: Float!): UserProfileOutput!
  Admin: Admin!
  getAllRestaurnants(restaurantInput: RestaurantsInput!): RestaurantsOutput!
  restaurant(restaurantInput: RestaurantInput!): RestaurantOutput!
  searchRestaurant(searchRestaurantInput: SearchRestaurantInput!): SearchRestaurantOutput!
  allCategories: AllCategoriesOutput!
  category(categoryInput: CategoryInput!): CategoryOutput!
}

input RestaurantsInput {
  page: Float = 1
}

input RestaurantInput {
  restaurantId: Float!
}

input SearchRestaurantInput {
  page: Float = 1
  query: String!
}

input CategoryInput {
  page: Float = 1
  categorySlug: String!
}

type Mutation {
  createUserAccount(createUserAccountInput: CreateUserAccountInput!): CreateUserAccountOutput!
  loginUser(loginUserInput: LoginUserInput!): LoginUserOutput!
  deleteUserAccount: DeleteUserAccountOutput!
  editUserProfile(editUserProfileInput: EditUserProfileInput!): EditUserProfileOutput!
  verifyEmailUser(verifyEmailUserInput: VerifyEmailInput!): VerifyEmailOutput!
  forgotUserPassword(forgotUserPasswordInput: ForgotUserPasswordInput!): ForgotUserPasswordOutput!
  resetPasswordUser(resetPasswordUserInput: ResetPasswordUserInput!): ResetPasswordUserOutput!
  createAdminAccount(createAdminAccountInput: CreateAdminAccountInput!): CreateAdminAccountOutput!
  loginAdmin(loginAdminInput: LoginAdminInput!): LoginAdminOutput!
  createRestaurant(createRestaurantInput: CreateRestaurantInput!): CreateRestaurantOutput!
  editRestaurant(editRestaurantInput: EditRestaurantInput!): EditRestaurantOutput!
  deleteRestaurant(deleteRestaurantInput: DeleteRestaurantInput!): DeleteRestaurantOutput!
  createCategory(createCategoryInput: CreateCategoryInput!): CreateCategoryOutput!
  editCategory(editCategoryInput: EditCategoryInput!): EditCategoryOutput!
  deleteCategory(deleteCategoryInput: DeleteCategoryInput!): DeleteCategoryOutput!
  createDish(createDishInput: CreateDishInput!): CreateDishOutput!
  editDish(editDishInput: EditDishInput!): EditDishOutput!
  deleteDish(deleteDishInput: DeleteDishInput!): DeleteDishOutput!
}

input CreateUserAccountInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: UserRole!
}

input LoginUserInput {
  email: String!
  password: String!
}

input EditUserProfileInput {
  firstName: String
  lastName: String
  username: String
  phoneNumber: Float
  address: String
  birthdate: DateTime
  email: String
  password: String
}

input VerifyEmailInput {
  code: String!
}

input ForgotUserPasswordInput {
  email: String!
}

input ResetPasswordUserInput {
  password: String!
  code: String!
  confirmPassword: String!
}

input CreateAdminAccountInput {
  email: String!
  password: String!
}

input LoginAdminInput {
  email: String!
  password: String!
}

input CreateRestaurantInput {
  name: String!
  address: String!
  coverImage: String!
  categoryName: String!
}

input EditRestaurantInput {
  name: String
  address: String
  coverImage: String
  categoryName: String
  restaurantId: Float!
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

input CreateCategoryInput {
  name: String!
  coverImage: String!
}

input EditCategoryInput {
  name: String
  coverImage: String
  categoryId: Float!
}

input DeleteCategoryInput {
  categoryId: Float!
}

input CreateDishInput {
  name: String!
  price: Float!
  photo: String!
  description: String!
  options: [DishOptionInputType!]
  restaurantId: Float!
}

input DishOptionInputType {
  name: String!
  choices: [DishChoiceInputType!]
  extra: Float
}

input DishChoiceInputType {
  name: String!
  extra: Float
}

input EditDishInput {
  name: String
  price: Float
  photo: String
  description: String
  options: [DishOptionInputType!]
  dishId: Float!
}

input DeleteDishInput {
  dishId: Float!
}
